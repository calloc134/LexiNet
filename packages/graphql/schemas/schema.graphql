# ユーザの権限を定義
enum Role {
  ADMIN
  USER
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

# UUIDスカラー型を利用するための定義
scalar UUID
# DateTimeスカラー型を利用するための定義
scalar DateTime
# 正の整数スカラー型を利用するための定義
scalar PositiveInt
# 正の浮動小数点数スカラー型を利用するための定義
scalar PositiveFloat

# authディレクティブを利用するための定義
directive @auth(role: Role! = USER) on FIELD_DEFINITION

# クエリのスキーマ定義
schema {
  query: Query
  mutation: Mutation
}

# クエリのスキーマ定義
type Query {
  # ユーザ一覧を取得するクエリ
  getAllUsers(offset: PositiveInt = 0, limit: PositiveInt = 10): [User!]! @auth(role: USER)
  # ユーザを取得するクエリ
  getUserByUUID(uuid: UUID!): User! @auth(role: USER)
  # 自分のユーザを取得するクエリ
  getMyUser: User! @auth(role: USER)
  # 自分に紐づくトランザクション一覧を取得するクエリ
  getAllMyTransactions(offset: PositiveInt = 0, limit: PositiveInt = 10): [Transaction!]! @auth(role: USER)
  # トランザクションを取得するクエリ
  getTransactionByUUID(uuid: UUID!): Transaction! @auth(role: USER)
}

# ミューテーションのスキーマ定義
type Mutation {
  # ユーザを更新するミューテーション 管理者用
  updateUserForAdmin(user_uuid: UUID!, handle: String, screen_name: String, bio: String): User! @auth(role: ADMIN)

  # ユーザを削除するミューテーション 管理者用
  deleteUserForAdmin(user_uuid: UUID!): User! @auth(role: ADMIN)

  # 自分のユーザの情報を更新するミューテーション
  updateMyUser(handle: String, screen_name: String, bio: String): User! @auth(role: USER)

  # 自分のユーザを削除するミューテーション
  deleteMyUser: User! @auth(role: USER)

  # PENDINGなトランザクションを作成するミューテーション
  createTransaction(amount: PositiveFloat!): Transaction! @auth(role: USER)

  # PENDINGなトランザクションに対して送金の確認を要求するミューテーション
  requestTransactionApproval(transaction_uuid: UUID!, transaction_hash: String!): Transaction! @auth(role: USER)

  # ChatGPTとの会話を行うミューテーション
  chatGPT(text: String!): ChatGPTInterface! @auth(role: USER)
}

# ユーザ型の定義
# uuidがプライマリキーの役割を果たす
type User {
  user_uuid: UUID!
  handle: String!
  screen_name: String!
  bio: String!
  tickets_count: PositiveInt!
  created_at: DateTime!
  updated_at: DateTime!
  role: Role!
}

# 投稿型の定義
# uuidがプライマリキーの役割を果たす
# userとは1対多の関係
type Transaction {
  transaction_uuid: UUID!
  transaction_hash: String!
  tickets_count: PositiveInt!
  amount: PositiveFloat!
  status: TransactionStatus!
  created_at: DateTime!
  updated_at: DateTime!
  # user: User!
}

type ChatGPTInterface {
  text: String!
}
